/*
 * generated by Xtext 2.25.0
 */
package homework.serializer;

import com.google.inject.Inject;
import homework.metamodel.homework.Course;
import homework.metamodel.homework.Homework;
import homework.metamodel.homework.HomeworkPackage;
import homework.metamodel.homework.Student;
import homework.metamodel.homework.Teacher;
import homework.services.DslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HomeworkPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HomeworkPackage.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case HomeworkPackage.HOMEWORK:
				sequence_Homework(context, (Homework) semanticObject); 
				return; 
			case HomeworkPackage.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			case HomeworkPackage.TEACHER:
				sequence_Teacher(context, (Teacher) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Course returns Course
	 *
	 * Constraint:
	 *     (name=EString (homework+=Homework homework+=Homework*)? (person+=Person person+=Person*)?)
	 */
	protected void sequence_Course(ISerializationContext context, Course semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Homework returns Homework
	 *
	 * Constraint:
	 *     Describe=EString?
	 */
	protected void sequence_Homework(ISerializationContext context, Homework semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Student
	 *     Student returns Student
	 *
	 * Constraint:
	 *     (name=EString (student+=[Person|EString] student+=[Person|EString]*)? teacher=[Person|EString]?)
	 */
	protected void sequence_Student(ISerializationContext context, Student semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Teacher
	 *     Teacher returns Teacher
	 *
	 * Constraint:
	 *     (name=EString (student+=[Person|EString] student+=[Person|EString]*)? teacher=[Person|EString]?)
	 */
	protected void sequence_Teacher(ISerializationContext context, Teacher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
